#HI THIS IS A COPY OF THE .BASH FILE THATS ON YOU COMPUTER. KINDLY COPY THE CONTENTS
#AND OFCOURSE CHANGE THE ADDRESSES AS THESE ARE MINE




# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
alias brave='brave-browser'

oho() {
local suggestion
suggestion=$(~/Shell_Mate/script/oho)
if [[ -n "$suggestion" ]]; then
eval "$suggestion"
fi
}




log_command() {
  local code=$?
  local cmd
  cmd=$(history 1 | sed 's/^[ ]*[0-9]\+[ ]*//')  # Get last command immediately

  local formatted_date
  formatted_date=$(date "+%d %B %Y")

  IGNORE_CMDS=("cd" "clear" "history" "showlog")
  IGNORE_PREFIXES=("ls" "cat" "history" "clear")

  for ignored in "${IGNORE_CMDS[@]}"; do
    [[ "$cmd" == "$ignored" ]] && return
  done

  for prefix in "${IGNORE_PREFIXES[@]}"; do
    [[ "$cmd" == "$prefix"* ]] && return
  done

  local venv=""
  if [[ -n "$VIRTUAL_ENV" ]]; then
    venv="(venv: $(basename "$VIRTUAL_ENV"))"
  fi

  # Log with error tag if non-zero exit
  
  if (( code != 0 )); then
    echo "$formatted_date || $(pwd) || $venv: $cmd  ##ERROR:$code" >> ~/logger.txt
  else
    echo "$formatted_date || $(pwd) || $venv: $cmd" >> ~/logger.txt
  fi
  local line_count
  line_count=$(wc -l < ~/logger.txt)
  if (( line_count > 50 )); then
    tail -n +21 ~/logger.txt > ~/.logger_tmp && mv ~/.logger_tmp ~/logger.txt
  fi

  if [[ "$code" =~ ^[0-9]+$ ]] && [ "$code" -eq 127 ]; then
    echo " COMMAND NOT FOUND. MAYBE A SPELLING MISTAKE?"
  fi


  

  jump() {
    local idx=$1 #what this $1 does is, that idx is a local variable. so whatever is the 1st argument passed to the function
    #this stores that.

    local file=~/Shell_Mate/script/recent_dirs.txt
    local dir=$(sed -n "${idx}p" "$file" | xargs)

  #so, $ sign helps to store the output in the dir variable. 


    if [ -d "$dir" ]; then
        cd "$dir"
    else
        echo "Directory not found: $dir"
    fi
}

# Shortcut aliases
alias jump1='jump 1'
alias jump2='jump 2'
alias jump3='jump 3'
alias jump4='jump 4'
alias jump5='jump 5'


}

export PROMPT_COMMAND='log_command; bash ~/Shell_Mate/script/run_logger_update.sh'



# Add ~/.local/bin to PATH
export PATH="$HOME/.local/bin:$PATH"
export PATH="$PATH:$HOME/Shell_Mate/script"


